"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8],{9613:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(9496);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,g=d["".concat(o,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(g,s(s({ref:n},c),{},{components:t})):r.createElement(g,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var u=2;u<i;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9165:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(9496),a=t(1626);const i="tabItem_V9uK";function s(e){let{children:n,hidden:t,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,s),hidden:t},n)}},9019:(e,n,t)=>{t.d(n,{Z:()=>m});var r=t(5443),a=t(9496),i=t(1626),s=t(9383),l=t(7166),o=t(281),u=t(2360);const c="tabList_BPXy",p="tabItem_MmxT";function d(e){var n,t;const{lazy:s,block:d,defaultValue:m,values:g,groupId:f,className:b}=e,h=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=g?g:h.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),y=(0,l.l)(v,((e,n)=>e.value===n.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const w=null===m?m:null!=(n=null!=m?m:null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)?n:h[0].props.value;if(null!==w&&!v.some((e=>e.value===w)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:k,setTabGroupChoices:O}=(0,o.U)(),[T,x]=(0,a.useState)(w),E=[],{blockElementScrollPositionUntilNextRender:N}=(0,u.o5)();if(null!=f){const e=k[f];null!=e&&e!==T&&v.some((n=>n.value===e))&&x(e)}const P=e=>{const n=e.currentTarget,t=E.indexOf(n),r=v[t].value;r!==T&&(N(n),x(r),null!=f&&O(f,String(r)))},j=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{var r;const n=E.indexOf(e.currentTarget)+1;t=null!=(r=E[n])?r:E[0];break}case"ArrowLeft":{var a;const n=E.indexOf(e.currentTarget)-1;t=null!=(a=E[n])?a:E[E.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},b)},v.map((e=>{let{value:n,label:t,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:e=>E.push(e),onKeyDown:j,onFocus:P,onClick:P},s,{className:(0,i.Z)("tabs__item",p,null==s?void 0:s.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),s?(0,a.cloneElement)(h.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==T})))))}function m(e){const n=(0,s.Z)();return a.createElement(d,(0,r.Z)({key:String(n)},e))}},2863:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var r=t(5443),a=(t(9496),t(9613)),i=t(9019),s=t(9165);const l={id:3,sidebar_position:3,slug:"list-field-with-arguments"},o="Field Lists with Arguments",u={unversionedId:"usage/3",id:"usage/3",title:"Field Lists with Arguments",description:"Combining the argument and list notation will return an array.",source:"@site/docs/usage/list-fields-with-arguments.md",sourceDirName:"usage",slug:"/usage/list-field-with-arguments",permalink:"/pqrs/usage/list-field-with-arguments",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"3",sidebar_position:3,slug:"list-field-with-arguments"},sidebar:"sidebar",previous:{title:"Fields with Arguments",permalink:"/pqrs/usage/field-with-arguments"},next:{title:"Query Variables",permalink:"/pqrs/usage/query-variables"}},c={},p=[{value:"Committing captured changes in children",id:"committing-captured-changes-in-children",level:3}],d={toc:p};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"field-lists-with-arguments"},"Field Lists with Arguments"),(0,a.kt)("p",null,"Combining the argument and list notation will return an array."),(0,a.kt)(i.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"bracket",label:"Bracket Keys",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"export function UsersLimit({ limit }) {\n  const [p, q, { isLoading }] = usePq(handler)\n\n  const users = p[`users(limit: ${limit})_`].map(\n    ({ id, name }) => `${id}: ${name}`\n  )\n\n  return (\n    <div>\n      {isLoading ? (\n        <span>loading...</span>\n      ) : (\n        users.map((entry) => <span>{entry}</span>)\n      )}\n    </div>\n  )\n}\n"))),(0,a.kt)(s.Z,{value:"params",label:"Params Function",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"export function UsersLimit({ limit }) {\n  const [p, q, { isLoading }] = usePq(handler)\n\n  const users = p.users.$_({ limit }).map(({ id, name }) => `${id}: ${name}`)\n\n  return (\n    <div>\n      {isLoading ? (\n        <span>loading...</span>\n      ) : (\n        users.map((entry) => <span>{entry}</span>)\n      )}\n    </div>\n  )\n}\n")))),(0,a.kt)("h3",{id:"committing-captured-changes-in-children"},"Committing captured changes in children"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"usePq")," relies on rerendering cycles to capture and commit fields that were accessed. If ",(0,a.kt)("inlineCode",{parentName:"p"},"usePq")," is call in a parent component and passed down as a prop to a child, rerendering the child and not the parent will not trigger the commit. Invoking ",(0,a.kt)("inlineCode",{parentName:"p"},"commitQuery")," does this job."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"function App() {\n  const [{ user }, q, { commitQuery, isLoading }] = usePq(handler)\n\n  return <User user={user} commitQuery={commitQuery} />\n}\n\nexport function User({ user, commitQuery }) {\n  const [id, setId] = useState(1)\n\n  // When id changes, the query will be updated after\n  // rendering.\n  useEffect(commitQuery, [id])\n\n  return (\n    <div>\n      {isLoading ? <span>loading...</span> : <span>{user.$({ id }).name}</span>}\n      <button onClick={() => setId(i + 1)}>next</button>\n    </div>\n  )\n}\n")))}m.isMDXComponent=!0}}]);