"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[207],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||l;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9165:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(9496),r=n(1626);const l="tabItem_V9uK";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:n},t)}},9019:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(5443),r=n(9496),l=n(1626),i=n(9383),o=n(7166),s=n(281),p=n(2360);const u="tabList_BPXy",d="tabItem_MmxT";function c(e){var t,n;const{lazy:i,block:c,defaultValue:m,values:h,groupId:f,className:k}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=h?h:v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,o.l)(y,((e,t)=>e.value===t.value));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===m?m:null!=(t=null!=m?m:null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)?t:v[0].props.value;if(null!==b&&!y.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:C}=(0,s.U)(),[w,T]=(0,r.useState)(b),P=[],{blockElementScrollPositionUntilNextRender:O}=(0,p.o5)();if(null!=f){const e=N[f];null!=e&&e!==w&&y.some((t=>t.value===e))&&T(e)}const q=e=>{const t=e.currentTarget,n=P.indexOf(t),a=y[n].value;a!==w&&(O(t),T(a),null!=f&&C(f,String(a)))},E=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=P.indexOf(e.currentTarget)+1;n=null!=(a=P[t])?a:P[0];break}case"ArrowLeft":{var r;const t=P.indexOf(e.currentTarget)-1;n=null!=(r=P[t])?r:P[P.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":c},k)},y.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>P.push(e),onKeyDown:E,onFocus:q,onClick:q},i,{className:(0,l.Z)("tabs__item",d,null==i?void 0:i.className,{"tabs__item--active":w===t})}),null!=n?n:t)}))),i?(0,r.cloneElement)(v.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,i.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},5202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(5443),r=(n(9496),n(9613));n(9019),n(9165);const l={sidebar_position:99},i="API",o={unversionedId:"api",id:"api",title:"API",description:"Canonical Naming",source:"@site/docs/api.md",sourceDirName:".",slug:"/api",permalink:"/api",draft:!1,tags:[],version:"current",sidebarPosition:99,frontMatter:{sidebar_position:99},sidebar:"sidebar",previous:{title:"Without Handler",permalink:"/usage/without-handler"}},s={},p=[{value:"Canonical Naming",id:"canonical-naming",level:3},{value:"<code>usePq</code>",id:"usepq",level:2},{value:"Arguments",id:"arguments",level:3},{value:"<code>handler</code>",id:"handler",level:4},{value:"Returns",id:"returns",level:3},{value:"<code>p</code>",id:"p",level:4},{value:"<code>q</code>",id:"q",level:4},{value:"<code>control</code>",id:"control",level:4}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"api"},"API"),(0,r.kt)("h3",{id:"canonical-naming"},"Canonical Naming"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const [p, q, { isLoading, commitQuery, bindData }] = usePq(handler)\n")),(0,r.kt)("h2",{id:"usepq"},(0,r.kt)("inlineCode",{parentName:"h2"},"usePq")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type UsePq<T> = (handler: QueryHandler<T>) => [\n  VirtualPropertyInterface,\n  string,\n  {\n    isLoading: boolean\n    commitQuery: () => void\n    bindData: (data: T) => void\n  }\n]\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"usePq")," is the named export from ",(0,r.kt)("inlineCode",{parentName:"p"},"use-pq"),". It is a hook wrapping four effects and takes in a query handler."),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("h4",{id:"handler"},(0,r.kt)("inlineCode",{parentName:"h4"},"handler")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type QueryHandler<T> = ((query: string) => T | Promise<T>) | undefined\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description")),(0,r.kt)("p",null,"The handler argument is a function that takes in a GraphQL query and returns the queried data."),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("h4",{id:"p"},(0,r.kt)("inlineCode",{parentName:"h4"},"p")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type VirtualPropertyInterface = {\n  [key: string]: any\n} & {\n  path: Path\n  value: () => ResolvedValue\n  get: () => ResolvedValue\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," value captures values that are needed during the the first render of the component. This can be accessed as if it already had the values that are needed to populate a function. The ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," value is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Proxy")," over an internal ",(0,r.kt)("inlineCode",{parentName:"p"},"VirtualProperty")," class, which implements most keys used by React to coalesce an input into a React element."),(0,r.kt)("p",null,"If properties are not used directly in JSX or ",(0,r.kt)("inlineCode",{parentName:"p"},"createElement"),", the fields need to be explicitly queried with ",(0,r.kt)("inlineCode",{parentName:"p"},".get()"),". On the other hand, ",(0,r.kt)("inlineCode",{parentName:"p"},".value()")," will read the internal value of the virtual property at that point without requesting any fields to be queried."),(0,r.kt)("h4",{id:"q"},(0,r.kt)("inlineCode",{parentName:"h4"},"q")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"string\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description"),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"q")," is the query generated after the field capture phase. This is the same string provided to the handler."),(0,r.kt)("h4",{id:"control"},(0,r.kt)("inlineCode",{parentName:"h4"},"control")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Type")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type Control = {\n  isLoading: boolean\n  commitQuery: () => void\n  bindData: (data: T) => void\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"isLoading")," is the state of the field capture phase. This is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," while the query is defined but the request data is null."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"commitQuery")," is an escape hatch used specifically in cases where a state update for a component does not trigger a rerender in the hook where ",(0,r.kt)("inlineCode",{parentName:"p"},"usePq")," was called. If ",(0,r.kt)("inlineCode",{parentName:"p"},"p")," is provided as a prop and the component rerenders, fields captured will ",(0,r.kt)("em",{parentName:"p"},"not")," be committed to the query. To make ",(0,r.kt)("inlineCode",{parentName:"p"},"use-pq")," aware of the changes, ",(0,r.kt)("inlineCode",{parentName:"p"},"commitQuery")," needs to be called in an effect e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect(commitQuery)"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"bindData")," is the setter for the internal ",(0,r.kt)("inlineCode",{parentName:"p"},"usePq")," data state. If ",(0,r.kt)("inlineCode",{parentName:"p"},"handler")," is not sourcing the data, bindData can be used to hydrate ",(0,r.kt)("inlineCode",{parentName:"p"},"p"),"."))}d.isMDXComponent=!0}}]);